#lang racket

;  поведение пассивного незнания

; Мы хотим:
; 📌 Модель, которая реагирует на ситуацию так, как это делает пассивное незнание:
; 👉 не задаёт вопросов, не замечает пробелов, игнорирует противоречия, не запускает реконфигурацию.

; 💡 Подход:
; Опишем когнитивного агента, у которого:
; 	1.	Есть вход — какая-то информация (ситуация, например, новое знание, факт, несостыковка).
; 	2.	Есть возможность среагировать — но в пассивном незнании он этого не делает.
; 	3.	Есть условия, при которых он остаётся слепым.

; ✅ Этап 1: определить функцию пассивное-незнание?

; Она принимает ситуация и проверяет: реагирует ли субъект, или “гладко проскальзывает” в слепой зоне.


;; ─── 1. Описание ситуации ────────────────────────────────────────────────────

;; Простой способ описать ситуацию: просто отдельные переменные
(define тип 'привычка)
(define интерес #f)
(define сомнение #f)
(define вопросы '()) ; список вопросов (пустой — никто ничего не спрашивает)

;; ─── 2. Функция для проверки на пассивное незнание ───────────────────────────

(define (пассивное-незнание? тип интерес сомнение вопросы)
  (cond
    ;; если есть интерес — значит, не пассивное
    [(equal? интерес #t)
     #f]

    ;; если есть сомнение — значит, уже активное восприятие
    [(equal? сомнение #t)
     #f]

    ;; если тип — один из триггеров пассивности
    [(or (equal? тип 'привычка)
         (equal? тип 'авторитет)
         (equal? тип 'шаблон))
         
     (if (zero? (length вопросы))
         #t  ; пассивное незнание
         #f)] ; если есть вопросы — уже не пассивное

    ;; во всех остальных случаях — не пассивное
    [else #f]))

;; ─── 3. Проверка: вызов функции с нашими значениями ─────────────────────────

(пассивное-незнание? тип интерес сомнение вопросы) ; => #t


