#lang racket

(require racket/random)

;; üéØ –¶–µ–ª–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∞–≥–µ–Ω—Ç (—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
(define goal-pool '(rest eat create achieve_understanding attain_peace))

;; üí° –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–ª—å
(define current-goal (box 'rest))

;; üìä –ö–∞—Ä—Ç–∞ "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è": —Å–∫–æ–ª—å–∫–æ —Ö–æ–¥–æ–≤ –¥–ª–∏—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç
(define satisfaction-map
  '((rest . 2)
    (eat . 1)
    (create . 3)
    (achieve_understanding . 4)
    (attain_peace . 1))) ; –±—ã—Å—Ç—Ä–æ —Ä–∞—Å–ø–∞–¥–∞–µ—Ç—Å—è

;; üì¶ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
(define state-log (box '()))

;; üß† –ê–≥–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç
(define (perform-action)
  (define goal (unbox current-goal))
  (define effect-duration (assoc goal satisfaction-map))
  (define ticks (if effect-duration (cdr effect-duration) 1))

  ;; –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
  (set-box! state-log (cons (list 'pursued goal 'for ticks 'steps) (unbox state-log)))

  ;; —Å–∏–º—É–ª–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è"
  (sleep 0.1) ; —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞

  ;; –ø–æ—Å–ª–µ "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è" ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π, –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π —Ü–µ–ª–∏
  (define next-goal
    (let* ([i (index-of goal-pool goal)]
           [next (if (< i (- (length goal-pool) 1))
                     (list-ref goal-pool (+ i 1))
                     (random-ref goal-pool))]) ; —Å–±–æ–π: —Å–∫–∞—á–æ–∫ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç
      next))

  (set-box! current-goal next-goal))

;; üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞
(define (run-agent cycles)
  (for ([i (in-range cycles)])
    (perform-action))
  (displayln "–ò—Å—Ç–æ—Ä–∏—è:")
  (for-each displayln (reverse (unbox state-log))))

;; ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
(run-agent 10)