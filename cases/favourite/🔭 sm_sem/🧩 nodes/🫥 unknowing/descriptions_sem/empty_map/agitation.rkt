#lang racket

;; Входные параметры:
;; - значимость: насколько важна тема (boolean)
;; - пробел?: зафиксирован ли пробел в знании (boolean)
;; - связана-с-убеждениями?: затрагивает ли убеждения (boolean)

(define (определить-режим-тревожности значимость пробел? связана-с-убеждениями?)
  (cond
    [(and пробел? значимость связана-с-убеждениями?)
     'явная-тревожность]

    [(and пробел? (not значимость))
     'фоновая-тревога]

    [(not пробел?)
     'нейтральность]

    [else
     'случай-неопределён])  ; на случай неполной конфигурации
)



;; Результирующее поведение в зависимости от режима тревожности
(define (реакция-на-тревожность режим)
  (cond
    [(eq? режим 'явная-тревожность) 'поиск-ответа]
    [(eq? режим 'фоновая-тревога) 'наблюдение]
    [(eq? режим 'нейтральность) 'без-действия]
    [else 'рефлексия]))  ; fallback-режим
  

;; Главная функция: принимает параметры и возвращает реакцию
(define (обработка-тревожности значимость пробел? связана-с-убеждениями?)
  (let ([режим (определить-режим-тревожности значимость пробел? связана-с-убеждениями?)])
    (реакция-на-тревожность режим)))


;; ✅ Пример вызова:
;; Тема важна, пробел замечен, затрагивает убеждения:
(обработка-тревожности #t #t #t)  ; → 'поиск-ответа

;; Пробел замечен, но тема не важна:
(обработка-тревожности #f #t #f)  ; → 'наблюдение

;; Пробел не зафиксирован:
(обработка-тревожности #t #f #t)  ; → 'без-действия